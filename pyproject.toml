[project]
name = "rdf-validation-comparison"
description = "Examples for comparing SHACL and ShEx"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "BSD-3-Clause"}
authors = [
    { name = "Eric Berquist", email = "eric.berquist@gmail.com" },
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "pyshacl @ git+https://github.com/RDFLib/pySHACL.git@f27cd87941ce68c19d1a00adc326dbcd12063cf9",
    "pyshex @ git+https://github.com/berquist/PyShEx.git@079818c2bef3867065cdbfe0db42c50692d20099",
    "rdflib",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://github.com/berquist/rdf-validation-comparison"
Source = "https://github.com/berquist/rdf-validation-comparison"
Tracker = "https://github.com/berquist/rdf-validation-comparison/issues"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/rdf_validation_comparison/_version.py"

[tool.hatch.build]
packages = ["src/rdf_validation_comparison"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
]

[tool.coverage.html]
directory = "build/coverage/htmlcov"

[tool.coverage.report]
# exclude_also requires 7.2.0+; earlier requires exclude_lines
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if False:",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "\\w*pass$",

    # No implementation
    "@(abc\\.)?abstractmethod",
    # Type stub
    "\\w*\\.\\.\\.$",
]

[tool.coverage.run]
branch = true
data_file = "build/coverage/.coverage"
omit = [
    "_version.py",  # automatically created by hatch-vcs, not in repo
]

[tool.isort]
profile = "black"
line_length = 100
# default is FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
# Placing third-party imports at the end makes their inclusion more obvious
sections = [
    "FUTURE",
    "STDLIB",
    "FIRSTPARTY",
    "THIRDPARTY",
    "LOCALFOLDER",
]

[tool.mypy]
cache_dir = "build/.mypy_cache"
color_output = true
error_summary = true
pretty = true
strict = true

[tool.pytest.ini_options]
addopts = "--doctest-glob='*.md' --isort --ruff --ruff-format"
cache_dir = "build/.pytest_cache"

[tool.ruff]
cache-dir = "build/.ruff_cache"
# exclude = [
#     "src/qspec_rdf_interop/_version.py",
# ]
include = [
    "src/**/*.py",
    "src/**/*.pyi",
    "tests/**/*.py",
    "tests/**/*.pyi"
]
target-version = "py39"
line-length = 100

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
preview = true # preview features & checks, use with caution
extend-select = [
    "A",
    "ARG",
    "B",
    # "C",
    # "DTZ",
    # "E",
    # "EM",
    # "F",
    # "FBT", # Boolean trap
    # "I",
    # "ICN",
    # "ISC",
    # "N",
    # "PLC",
    # "PLE",
    # "PLR",
    # "PLW",
    # "Q",
    "RUF",
    # "S",
    # "SIM",
    # "T",
    # "TID",
    "UP",
    # "W",
    # "YTT",
    "RUF100", # Automatically remove unused # noqa directives
    # features in preview
    # "W292", # missing-newline-at-end-of-file
]
# ignore = [
#     # Allow non-abstract empty methods in abstract base classes
#     "B027",
#     # Allow boolean positional values in function calls, like `dict.get(... True)`
#     "FBT003",
#     # Ignore checks for possible passwords
#     "S105", "S106", "S107",
#     # Ignore complexity
#     "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
#     "PLC1901", # empty string comparisons
#     "PLW2901", # `for` loop variable overwritten
#     "SIM114", # Combine `if` branches using logical `or` operator
#     "E203", # Whitespace before :, needed for black compatability and also `ruff format`
#     "ISC001", # causes unexpected behaviour with formatter
# ]

[tool.ruff.lint.isort]
known-first-party = ["rdf_validation_comparison"]
lines-after-imports = 2
section-order = [
    "future",
    "standard-library",
    "first-party",
    "third-party",
    "local-folder",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

# [tool.ruff.lint.per-file-ignores]
# # Allow print/pprint
# "examples/*" = ["T201"]
# "src/rdf_validation_comparison/data/*" = ["T201"]
# # Tests can use magic values, assertions, and relative imports
# "tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.1"]

[tool.hatch.envs.default]
python = "3.9"
post-install-commands = ["pre-commit install"]
type = "pip-compile"
pip-compile-constraint = "default"  # keep locks between default & others consistent
lock-filename = "locks/{env_name}.lock"
pip-compile-hashes = true
# specified in [project.dependencies]
dependencies = []
[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"

[tool.hatch.envs.test]
dependencies = [
    "coverage[toml]",
    "pytest",
    "pytest-cov",
    "pytest-isort",
    "pytest-ruff",
]
[tool.hatch.envs.test.scripts]
cov = "python -m pytest --cov-report=term-missing --cov-report=html {args}"
no-cov = "cov --no-cov {args}"
debug = "cov --no-cov -s --pdb {args}"

# Removed in favor of explicit locked test env
# [tool.hatch.envs.hatch-test]
# extra-args = ["-v"]
# extra-dependencies = [
#     "isort",
#     "pytest-isort",
#     "pytest-ruff",
#     "ruff",
# ]
# [tool.hatch.envs.hatch-test.scripts]
# # defaults (required for any overrides)
# run = "pytest{env:HATCH_TEST_ARGS:} {args}"
# run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
# cov-combine = "coverage combine"
# # override: add HTML generation
# cov-report = "coverage report; coverage html"

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs~=1.6",
    "mkdocs-material[imaging]~=9.4",
    # Plugins
    "mkdocs-include-markdown-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-minify-plugin~=0.8",
    "mkdocs-section-index",
    "mkdocs-git-revision-date-localized-plugin~=1.2",
    "mkdocstrings[python]",
    "mkdocs-redirects~=1.2",
    "mkdocs-glightbox~=0.4.0",
    "mike~=2.1",
    # Extensions
    "pymdown-extensions~=10.9",
    # Necessary for syntax highlighting in code blocks
    "pygments~=2.18",
    # Validation
    "linkchecker~=10.4",
]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
    "build",
    "validate",
]

[tool.hatch.envs.format-and-lint]
dependencies = [
    "hadolint-py @ git+https://github.com/AleksaC/hadolint-py.git@v2.12.1b3",
    "isort",
    "mypy",
    "ruff",
    # needed for mypy
    "pytest",
]
# TODO doesn't work as long as `extra-dependencies` aren't inherited
# extra-dependencies = [
#     "mypy",
# ]
# template = "hatch-test"
[tool.hatch.envs.format-and-lint.scripts]
docker = [
    "echo \"VERSION: `hadolint --version`\"",
    "hadolint {args:./Dockerfile}",
]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}"
]
style = [
    "echo \"VERSION: `isort --version`\"",
    "isort --check-only {args:.}",
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "isort {args:.}",
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",  # feedback on what is not fixable
]
all = [
    "fix",
    "typing",
]
